//@ts-nocheck
import { OpenAI } from 'langchain/llms.js'
import { FewShotPromptTemplate, PromptTemplate } from 'langchain/prompts.js'
import { LLMChain } from "langchain/chains.js"
import { getToken } from 'next-auth/jwt'
import { Octokit } from "@octokit/core";
import supabase from "../../lib/supabase"
import { setTimeout } from 'timers/promises';
import { NextApiRequest, NextApiResponse } from 'next'

// export const config = {
//   runtime: "edge",
// };

const codeModelName = "code-davinci-002"
const langModelName = "text-davinci-003"

const codeModel = new OpenAI({
  temperature: 0.7, modelName: codeModelName
})

const langModel = new OpenAI({
  temperature: 0.7, modelName: langModelName
})

const templateCall = async (req, llm=langModel) => {
  
  const template = ""
  
  // TODO: Fill this out
  const prompt = new PromptTemplate({ template: template, inputVariables: []})
  
  const chain = new LLMChain({llm: llm, prompt: prompt})
  
  const res = await chain.call({ /* Params */ })
  
  console.log(res)

}

const aboutMe = async (name, description, skills, hobbies, job, tone) => {
  const template = "Create a one paragraph 'about me' section for {name}'s personal website, using their given job title ({job}), skills ({skills}), hobbies ({hobbies}), and description ({description}). The  paragraph should start by introducing {name} and providing some personal background information, then should focus on {name}'s qualifications and skillset, as described by their job title, skills, and hobbies. Use {tone} language and make sure to emphasize the relevance of their personal and professional experiences to their current goals. Make sure to write in the first person."
  
  const prompt = new PromptTemplate({ template: template, inputVariables: ["name", "description", "skills", "hobbies", "job", "tone"]})
  
  const chain = new LLMChain({llm: langModel, prompt: prompt})

  const res = await chain.call({ name, description, skills, hobbies, job, tone })
  
  //console.log(res)

  return res
}

// projects: [
//   {
//     title: "TFTMuZeroAgent",
//     description: "Team fight tactics AI",
//     stars: "3",
//     url: ""
//   }
// ]
const githubProject = async (project) => {
  const template = ""
}

// https://hwchase17.github.io/langchainjs/docs/modules/prompts/few_shot_examples 
const fewShotCall = async (req, llm=codeModel) => {
  const examples = [
   /* Example components here */ 
  ]
   
  const exampleFormatterTemplate = ""
  
  const examplePrompt = new PromptTemplate({
    inputVariables: [],
    template: exampleFormatterTemplate
  })
  
  prefix = "" // Instructions
  suffix = "" // User Input
  
  const fewShotPrompt = new FewShotPromptTemplate({
    examples: examples,
    examplePrompt: examplePrompt,
    // Instructions
    prefix: prefix,
    suffix: suffix,
    inputVariables: [],
    exampleSeparator: "\n\n",
    templateFormat: "f-string",
  });

  
  const res = fewShotPrompt.format({ /* inputs */ })
  //console.log({ res })

  return res
}

const get_auth_token = async (req) => {
  const secret = process.env.JWT_SECRET

  const token = await getToken({ req, secret })
  return token
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const token = await get_auth_token(req)

  const octokit = new Octokit({
    auth: token.accessToken
  })

  console.log(req.body)

  const body = req.body

   const {name, email, job, selectedProjects, skills, hobbies, style, title, username, twitterUrl, instagramUrl, description}  = body
   const generatedText = await aboutMe(name, description, skills, hobbies, job, style)
   console.log(generatedText.text.trim())
   const firstName = name.split(' ').slice(0, -1).join(' ')
   const lastName = name.split(' ').slice(-1).join(' ')
   const githubUrl = `https://github.com/${username}`
   const jobDescription = description
   const aboutText = generatedText.text.trim()

   const generatedJson = {
    firstName: firstName,
    lastName: lastName,
    email: email,
    githubUrl: githubUrl,
    instagramUrl: instagramUrl,
    twitterUrl: twitterUrl,
    jobDescription: jobDescription,
    aboutText: aboutText,
    projects: selectedProjects
   }

   let content = Buffer.from(JSON.stringify(generatedJson)).toString("base64")

   console.log('creating repo')
  // Create the repository
  try {
  const res = await octokit.request('POST /repos/{template_owner}/{template_repo}/generate', {
    template_owner: 'saarnav890',
    template_repo: 'siteify-template-one',
    name: title,
    description: 'Siteify Autogenerated Website ðŸš€',
    include_all_branches: false,
    'private': false
  })
  } catch (error){
    console.error(error)
  }
  
  const a = await setTimeout(2500)
  console.log('fetch SHA')
  const repoData = await octokit.request('GET /repos/{owner}/{repo}/contents/{path}', {
    owner: username,
    repo: title,
    path: 'data.json'
  })


  console.log('write data.json')
  await octokit.request('PUT /repos/{owner}/{repo}/contents/{path}', {
    owner: username,
    repo: title,
    path: 'data.json',
    message: 'update data.json ðŸš€',
    content: content,
    sha: repoData.data.sha
  })

  const response = {
    username: username,
    title: title
  }

  // const projectLink = `https://github.com/${username}/${title}`
  // console.log("here");
  // const { data, error } = await supabase
  // .from('sites')
  // .insert({ id: 1, title: title, updated_at: ((new Date()).toISOString()).toLocaleString('zh-TW'), link: projectLink, github_id: token.id})

  res.send(JSON.stringify(response, null, 2))
};